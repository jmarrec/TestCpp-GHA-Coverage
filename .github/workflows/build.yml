name: C++ CI

on:
  push:
    branches: [ main, mac ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: Default is true, switch to false to allow one platform to fail and still run others
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
        - os: ubuntu-latest
          PLATFORM_NAME: Linux
          BINARY_EXT: run
        - os: macos-latest
          PLATFORM_NAME: Darwin
          BINARY_EXT: dmg

    permissions:
      # Needed permission to upload the release asset
      contents: write

    steps:
    - uses: actions/checkout@v5

    - uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install conan
      run: |
          python --version
          pip install "conan>=2"
          # Dev version gained a markdown option that wasn't in 8.3 yet, so use it
          pip install git+https://github.com/gcovr/gcovr.git
          conan --version
          echo "Enabling conan revisions and setting parallel_download"
          conan profile detect --force --name default
          conan profile path default
          conan profile show
          echo "core:non_interactive = True" >> $HOME/global.conf
          echo "core.download:parallel = {{os.cpu_count() - 2}}" >> $HOME/global.conf

    - name: Setup QtIFW 4.x
      uses: jmarrec/setup-qtifw@v1
      with:
        qtifw-version: '4.8.1'

    - name: Install deps
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "Using apt to install ninja"
          sudo apt update
          sudo apt -y -qq install ninja-build
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "Using brew to install ninja"
          brew install ninja
          echo "Setting MACOSX_DEPLOYMENT_TARGET to 10.15"
          echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
          echo "Adding SDKROOT to GITHUB_ENV"
          echo "SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk" >> $GITHUB_ENV
        fi;

        mkdir build

    - name: CMake configure
      working-directory:
      shell: bash
      run: |
        set -x
        conan install . --build=missing -c tools.cmake.cmaketoolchain:generator=Ninja -s compiler.cppstd=20 -s build_type=Debug --output-folder=build
        cmake --preset conan-debug -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON -DENABLE_COVERAGE:BOOL=ON -DCPACK_BINARY_IFW:BOOL=ON

    - name: Build
      working-directory: ./build
      shell: bash
      run: |
        cmake --build --preset conan-debug --target package

    - name: Produce coverage report
      working-directory: ./build
      shell: bash
      run: |
        set -x
        ctest -j $(nproc)
        gcovr -j $(nproc) --delete --root ../ --exclude '.*GTest.cpp' --print-summary --xml-pretty --xml coverage.xml .
        gcovr --root ../ --markdown-summary >> $GITHUB_STEP_SUMMARY

    - name: Publish to codecov
      uses: codecov/codecov-action@v5
      with:
        flags: ${{ runner.os }}
        name: ${{ runner.os }}-coverage
        files: ./build/coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Build package
      working-directory: ./build
      shell: bash
      run: |
        set -x
        . ./conanbuild.sh
        ninja package

    - name: Upload Binary installer to release
      if: contains(github.ref, 'refs/tags')
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/_CPack_Packages/${{ matrix.PLATFORM_NAME }}/IFW/*.${{ matrix.BINARY_EXT }}
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

