name: C++ CI

on:
  push:
    branches: [ main, mac ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: Default is true, switch to false to allow one platform to fail and still run others
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install conan
      run: |
          python --version
          pip install conan gcovr
          conan --version
          echo "Enabling conan revisions and setting parallel_download"
          conan config set general.revisions_enabled=True
          conan config set general.parallel_download=8
          conan user

    - name: Install deps
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "Using apt to install ninja"
          sudo apt update
          sudo apt -y -qq install ninja-build
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "Using brew to install ninja"
          brew install ninja
          echo "Setting MACOSX_DEPLOYMENT_TARGET to 10.15"
          echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
          echo "Adding SDKROOT to GITHUB_ENV"
          echo "SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk" >> $GITHUB_ENV
        fi;

        mkdir build

    - name: CMake configure
      working-directory: ./build
      shell: bash
      run: |
        set -x
        cmake -G Ninja -DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON -DENABLE_COVERAGE:BOOL=ON ../

    - name: Build
      working-directory: ./build
      shell: bash
      run: |
        set -x
        ninja

    - name: Produce coverage report
      working-directory: ./build
      shell: bash
      run: |
        set -x
        ./Products/testlib_tests
        gcovr -j $(nproc) --delete --root ../ --exclude '.*GTest.cpp' --print-summary --xml-pretty --xml coverage.xml .

    - name: Publish to codecov
      uses: codecov/codecov-action@v2
      with:
        flags: ${{ runner.os }}
        name: ${{ runner.os }}-coverage
        files: ./build/coverage.xml
